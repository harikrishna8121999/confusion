[{"C:\\coursera\\react\\confusion\\src\\index.js":"1","C:\\coursera\\react\\confusion\\src\\App.js":"2","C:\\coursera\\react\\confusion\\src\\reportWebVitals.js":"3","C:\\coursera\\react\\confusion\\src\\components\\MenuComponent.js":"4","C:\\coursera\\react\\confusion\\src\\shared\\dishes.js":"5","C:\\coursera\\react\\confusion\\src\\components\\DishdetailComponent.js":"6","C:\\coursera\\react\\confusion\\src\\components\\MainComponent.js":"7","C:\\coursera\\react\\confusion\\src\\components\\FooterComponent.js":"8","C:\\coursera\\react\\confusion\\src\\components\\HeaderComponent.js":"9","C:\\coursera\\react\\confusion\\src\\components\\HomeComponent.js":"10","C:\\coursera\\react\\confusion\\src\\components\\ContactComponent.js":"11","C:\\coursera\\react\\confusion\\src\\shared\\comments.js":"12","C:\\coursera\\react\\confusion\\src\\shared\\promotions.js":"13","C:\\coursera\\react\\confusion\\src\\shared\\leaders.js":"14","C:\\coursera\\react\\confusion\\src\\components\\AboutComponent.js":"15","C:\\coursera\\react\\confusion\\src\\redux\\configureStore.js":"16","C:\\coursera\\react\\confusion\\src\\redux\\reducer.js":"17"},{"size":639,"mtime":1610027097795,"results":"18","hashOfConfig":"19"},{"size":531,"mtime":1610517745158,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":1501,"mtime":1610118194526,"results":"22","hashOfConfig":"19"},{"size":1490,"mtime":1610035956613,"results":"23","hashOfConfig":"19"},{"size":2821,"mtime":1610118477495,"results":"24","hashOfConfig":"19"},{"size":2233,"mtime":1610518493929,"results":"25","hashOfConfig":"19"},{"size":2639,"mtime":1610033100161,"results":"26","hashOfConfig":"19"},{"size":5063,"mtime":1610461275520,"results":"27","hashOfConfig":"19"},{"size":1112,"mtime":1610036414861,"results":"28","hashOfConfig":"19"},{"size":11010,"mtime":1610458142111,"results":"29","hashOfConfig":"19"},{"size":4279,"mtime":1610036169277,"results":"30","hashOfConfig":"19"},{"size":445,"mtime":1610036082388,"results":"31","hashOfConfig":"19"},{"size":2382,"mtime":1610036142333,"results":"32","hashOfConfig":"19"},{"size":4429,"mtime":1610458347015,"results":"33","hashOfConfig":"19"},{"size":262,"mtime":1610517637253,"results":"34","hashOfConfig":"19"},{"size":407,"mtime":1610517551008,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1q1d81f",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\coursera\\react\\confusion\\src\\index.js",[],["74","75"],"C:\\coursera\\react\\confusion\\src\\App.js",[],"C:\\coursera\\react\\confusion\\src\\reportWebVitals.js",[],"C:\\coursera\\react\\confusion\\src\\components\\MenuComponent.js",[],"C:\\coursera\\react\\confusion\\src\\shared\\dishes.js",[],"C:\\coursera\\react\\confusion\\src\\components\\DishdetailComponent.js",["76"],"import React  from 'react';\r\nimport { Card, CardImg, CardImgOverlay, CardText, CardBody, CardTitle } from 'reactstrap';\r\n\r\nfunction RenderDish({dish}) {\r\n        if (dish != null){\r\n            return(\r\n                <div className=\"col-12 col-md-5 m-1\">\r\n                    <Card>\r\n                        <CardImg width=\"100%\" src={dish.image} alt={dish.name} />\r\n                        <CardBody>\r\n                            <CardTitle>{dish.name}</CardTitle>\r\n                            <CardText>{dish.description}</CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            return (\r\n                <div></div>\r\n            );\r\n        }\r\n    }\r\n\r\n    function RenderComments({comments}) {\r\n        if (comments != null){\r\n            return (\r\n                <div className=\"col-12 col-md-5 m-1\">\r\n                     <h4>Comments</h4>\r\n                      <ul className=\"list-unstyled\">\r\n                          {comments.map((comment) => {\r\n                              return (\r\n                                 <li key={comment.id}>\r\n                                     <p>{comment.comment}</p>\r\n                                     <p>-- {comment.author}, {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(comment.date)))} </p>\r\n                                 </li>\r\n                              );\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n                );\r\n            }\r\n        else \r\n            return (\r\n                <div></div>\r\n            );\r\n    }\r\n\r\n    const  DishDetail = (props) => {\r\n        if (props.dish != null)\r\n           return ( \r\n            <div class = \"container\">\r\n            <div className=\"row\">\r\n                <RenderDish dish ={props.dish} />\r\n                <RenderComments comments = {props.dish.comments} />\r\n            </div>   \r\n            </div>\r\n           );\r\n        else \r\n           return(\r\n               <div></div>\r\n           );\r\n         \r\n    }\r\n\r\n\r\nexport default DishDetail;","C:\\coursera\\react\\confusion\\src\\components\\MainComponent.js",["77","78","79"],"C:\\coursera\\react\\confusion\\src\\components\\FooterComponent.js",[],"C:\\coursera\\react\\confusion\\src\\components\\HeaderComponent.js",[],"C:\\coursera\\react\\confusion\\src\\components\\HomeComponent.js",[],"C:\\coursera\\react\\confusion\\src\\components\\ContactComponent.js",["80","81"],"import React, {Component} from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, Row, FormFeedback } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Contact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            firstname: '',\r\n            lastname: '',\r\n            telnum: '',\r\n            email: '',\r\n            agree: false,\r\n            contactType: 'Tel.',\r\n            message: '' ,\r\n            touched: {\r\n                firstname: false,\r\n                lastname: false,\r\n                telnum: false,\r\n                email: false\r\n            }\r\n        };\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleBlur = this.handleBlur.bind(this);\r\n        \r\n    }\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n    \r\n        this.setState({\r\n          [name]: value\r\n        });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        console.log('Current State is: ' + JSON.stringify(this.state));\r\n        alert('Current State is: ' + JSON.stringify(this.state));\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleBlur = (field) => (evt) => {\r\n        this.setState({\r\n            touched: { ...this.state.touched, [field]: true }\r\n        });\r\n    }\r\n    validate(firstname, lastname, telnum, email) {\r\n        const errors = {\r\n            firstname: '',\r\n            lastname: '',\r\n            telnum: '',\r\n            email: ''\r\n        };\r\n\r\n        if (this.state.touched.firstname && firstname.length < 3)\r\n            errors.firstname = 'First Name should be >= 3 characters';\r\n        else if (this.state.touched.firstname && firstname.length > 10)\r\n            errors.firstname = 'First Name should be <= 10 characters';\r\n\r\n        if (this.state.touched.lastname && lastname.length < 3)\r\n            errors.lastname = 'Last Name should be >= 3 characters';\r\n        else if (this.state.touched.lastname && lastname.length > 10)\r\n            errors.lastname = 'Last Name should be <= 10 characters';\r\n\r\n        const reg = /^\\d+$/;\r\n        if (this.state.touched.telnum && !reg.test(telnum))\r\n            errors.telnum = 'Tel. Number should contain only numbers';\r\n\r\n        if(this.state.touched.email && email.split('').filter(x => x === '@').length !== 1)\r\n            errors.email = 'Email should contain a @';\r\n\r\n        return errors;\r\n    }\r\n    render() {\r\n        const errors = this.validate(this.state.firstname, this.state.lastname, this.state.telnum, this.state.email);\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Contact Us</h3>\r\n                        <hr />\r\n                    </div>                \r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                    <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                            <h5>Our Address</h5>\r\n                            <address>\r\n                            121, Clear Water Bay Road<br />\r\n                            Clear Water Bay, Kowloon<br />\r\n                            HONG KONG<br />\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                            </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n\r\n                <div className=\"row row-content\">\r\n                   <div className=\"col-12\">\r\n                      <h3>Send us your Feedback</h3>\r\n                   </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                        <FormGroup row>\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"firstname\" name=\"firstname\"\r\n                                        placeholder=\"First Name\"\r\n                                        value={this.state.firstname}\r\n                                        valid={errors.firstname === ''}\r\n                                        invalid={errors.firstname !== ''}\r\n                                        onBlur={this.handleBlur('firstname')}\r\n                                        onChange={this.handleInputChange} />\r\n                                    <FormFeedback>{errors.firstname}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\"\r\n                                        value={this.state.lastname}\r\n                                        valid={errors.lastname === ''}\r\n                                        invalid={errors.lastname !== ''}\r\n                                        onBlur={this.handleBlur('lastname')}\r\n                                        onChange={this.handleInputChange} />\r\n                                    <FormFeedback>{errors.lastname}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"tel\" id=\"telnum\" name=\"telnum\"\r\n                                        placeholder=\"Tel. Number\"\r\n                                        value={this.state.telnum}\r\n                                        valid={errors.telnum === ''}\r\n                                        invalid={errors.telnum !== ''}\r\n                                        onBlur={this.handleBlur('telnum')}\r\n                                        onChange={this.handleInputChange} />\r\n                                    <FormFeedback>{errors.telnum}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        value={this.state.email}\r\n                                        valid={errors.email === ''}\r\n                                        invalid={errors.email !== ''}\r\n                                        onBlur={this.handleBlur('email')}\r\n                                        onChange={this.handleInputChange} />\r\n                                    <FormFeedback>{errors.email}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Col md={{size: 6, offset: 2}}>\r\n                                    <FormGroup check>\r\n                                        <Label check>\r\n                                            <Input type=\"checkbox\"\r\n                                                name=\"agree\"\r\n                                                checked={this.state.agree}\r\n                                                onChange={this.handleInputChange} /> {' '}\r\n                                            <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col md={{size: 3, offset: 1}}>\r\n                                    <Input type=\"select\" name=\"contactType\"\r\n                                            value={this.state.contactType}\r\n                                            onChange={this.handleInputChange}>\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Input>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"textarea\" id=\"message\" name=\"message\"\r\n                                        rows=\"12\"\r\n                                        value={this.state.message}\r\n                                        onChange={this.handleInputChange}></Input>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Col md={{size: 10, offset: 2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </div>\r\n               </div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default Contact;","C:\\coursera\\react\\confusion\\src\\shared\\comments.js",[],"C:\\coursera\\react\\confusion\\src\\shared\\promotions.js",[],"C:\\coursera\\react\\confusion\\src\\shared\\leaders.js",[],["82","83"],"C:\\coursera\\react\\confusion\\src\\components\\AboutComponent.js",[],"C:\\coursera\\react\\confusion\\src\\redux\\configureStore.js",[],"C:\\coursera\\react\\confusion\\src\\redux\\reducer.js",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":2,"column":25,"nodeType":"90","messageId":"91","endLine":2,"endColumn":39},{"ruleId":"88","severity":1,"message":"92","line":2,"column":10,"nodeType":"90","messageId":"91","endLine":2,"endColumn":16},{"ruleId":"88","severity":1,"message":"93","line":2,"column":18,"nodeType":"90","messageId":"91","endLine":2,"endColumn":29},{"ruleId":"94","severity":1,"message":"95","line":24,"column":3,"nodeType":"96","messageId":"97","endLine":27,"endColumn":7},{"ruleId":"88","severity":1,"message":"98","line":2,"column":82,"nodeType":"90","messageId":"91","endLine":2,"endColumn":85},{"ruleId":"99","severity":1,"message":"100","line":113,"column":29,"nodeType":"101","endLine":113,"endColumn":71},{"ruleId":"84","replacedBy":"102"},{"ruleId":"86","replacedBy":"103"},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'CardImgOverlay' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'NavbarBrand' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Row' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["104"],["105"],"no-global-assign","no-unsafe-negation"]